/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package broadband_distribution;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ishfaq
 */
public class emp_menu5 extends javax.swing.JInternalFrame {

    /**
     * Creates new form emp_menu5
     */
    public emp_menu5() {
        initComponents();
        hide.setVisible(false);
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Broadband;selectMethod=cursor", "sa", "123456");

            Statement statement = connection.createStatement();
            String sql = "SELECT employee.employeeId,CONCAT(employee.eFame, ' ', employee.elastName) AS name  , employee.ephoneNo,salary.amount,salary.time,salary.position,salary.status   From employee INNER JOIN salary on employee.employeeId= salary.employeeId";
            //  String sql= "SELECT bill.billId, customer.customerId, customer.cName, bill.amount, bill.status,customer.cPhoneNo From bill INNER JOIN customer ON bill.customerId=customer.customerId ";
            ResultSet resultSet = statement
                    .executeQuery(sql);

            while (resultSet.next()) {

                String id = resultSet.getString("employeeId");
                String fname = resultSet.getString("name");

                String fNo = resultSet.getString("ephoneNo");

                String des = resultSet.getString("amount");
                String sal = resultSet.getString("time");
                String wa = resultSet.getString("position");
                String ja = resultSet.getString("status");
                String tData[] = {id, fname, fNo, des, sal, wa, ja};
                DefaultTableModel tbm1 = (DefaultTableModel) salaryTable.getModel();
                tbm1.addRow(tData);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        dline = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        salaryTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        hide = new javax.swing.JPanel();
        id = new javax.swing.JTextField();
        con = new javax.swing.JTextField();
        amt = new javax.swing.JTextField();
        time = new javax.swing.JTextField();
        rank = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        stat = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setPreferredSize(new java.awt.Dimension(700, 540));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jComboBox1.setBackground(new java.awt.Color(0, 153, 255));
        jComboBox1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EMPLOYEE ID", "NAME", "STATUS" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("ENTER KEYWORDS :");

        jButton4.setBackground(new java.awt.Color(153, 153, 153));
        jButton4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton4.setText("SREACH");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        dline.setBorder(null);
        dline.setOpaque(false);

        salaryTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        salaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "NAME", "PHONE NO", "AMOUNT", "TIME", "RANK", "STATUS"
            }
        ));
        salaryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salaryTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(salaryTable);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("SERACH BY :");

        hide.setBackground(new java.awt.Color(204, 204, 204));

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hideLayout = new javax.swing.GroupLayout(hide);
        hide.setLayout(hideLayout);
        hideLayout.setHorizontalGroup(
            hideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hideLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(con, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(amt, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(rank, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        hideLayout.setVerticalGroup(
            hideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hideLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(hideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rank, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(con, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jButton6.setBackground(new java.awt.Color(0, 203, 133));
        jButton6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton6.setText("UPDATE");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        stat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(0, 203, 133));
        jButton7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton7.setText("Refresh");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(dline, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton4)
                                        .addGap(33, 33, 33))))
                            .addComponent(hide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jButton6)
                        .addGap(55, 55, 55)
                        .addComponent(stat, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(jButton7)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(dline, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(hide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(stat, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
 DefaultTableModel tbm = (DefaultTableModel) salaryTable.getModel();
                tbm.setRowCount(0);
      String value = jComboBox1.getSelectedItem().toString();
        if (value.equals("EMPLOYEE ID")) {
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection = DriverManager.getConnection(
                        "jdbc:sqlserver://localhost:1433;databaseName=Broadband;selectMethod=cursor", "sa", "123456");

                String dead = dline.getText();
                // String size= jTextField2.getText();

                Statement statement = connection.createStatement();

                //String Client_Name = null;
                //String Email = null;
                //String sql="SELECT cName,cPhoneNo FROM customer WHERE customerId = '"+ Integer.parseInt(dead) +"'";
                // String sql= "SELECT customer.cName, bill.amount,bill.deadline, bill.status,customer.cPhoneNo From bill INNER JOIN customer ON bill.customerId=customer.customerId  WHERE customerId = '"+ Integer.parseInt(dead) +"'";
                //    ResultSet resultSet = statement.executeQuery
                ResultSet resultSet = statement.executeQuery("select e.employeeId,CONCAT(e.eFame, ' ', e.elastName) AS name ,e.ephoneNo, s.amount,s.time,s.position,s.status from employee E,salary S where EXISTS (select E.employeeId from employee join salary on(E.employeeId =S.employeeId) where S.employeeId= '" + Integer.parseInt(dead) + "' )");
                if (resultSet.next()) {

                    String Bid = resultSet.getString("employeeId");
                    String Cid = resultSet.getString("name");
                    String amount = resultSet.getString("ephoneNo");

                    String deadline = resultSet.getString("amount");
                    String stat = resultSet.getString("time");
                    String method = resultSet.getString("position");

                    String stat2 = resultSet.getString("status");

                    String tData[] = {Bid, Cid, amount, deadline, stat, method, stat2};
                    DefaultTableModel tbm1 = (DefaultTableModel) salaryTable.getModel();
                    tbm1.addRow(tData);

                } else {
                    JOptionPane.showMessageDialog(this, "Enter Keyword");

                }
                connection.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (value.equals("STATUS")) {
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection = DriverManager.getConnection(
                        "jdbc:sqlserver://localhost:1433;databaseName=Broadband;selectMethod=cursor", "sa", "123456");

                String dead = dline.getText();
                // String size= jTextField2.getText();

                Statement statement = connection.createStatement();

                //String Client_Name = null;
                //String Email = null;
                //String sql="SELECT cName,cPhoneNo FROM customer WHERE customerId = '"+ Integer.parseInt(dead) +"'";
                // String sql= "SELECT customer.cName, bill.amount,bill.deadline, bill.status,customer.cPhoneNo From bill INNER JOIN customer ON bill.customerId=customer.customerId  WHERE customerId = '"+ Integer.parseInt(dead) +"'";
                //    ResultSet resultSet = statement.executeQuery
                ResultSet resultSet = statement.executeQuery("select e.employeeId,CONCAT(e.eFame, ' ', e.elastName) AS name ,e.ephoneNo, s.amount,s.time,s.position,s.status from employee E join salary s on e.employeeId=s.employeeId and s.status like '%"+dead+"%' ");
                while (resultSet.next()) {

                    String Bid = resultSet.getString("employeeId");
                    String Cid = resultSet.getString("name");
                    String amount = resultSet.getString("ephoneNo");

                    String deadline = resultSet.getString("amount");
                    String stat = resultSet.getString("time");
                    String method = resultSet.getString("position");

                    String stat2 = resultSet.getString("status");

                    String tData[] = {Bid, Cid, amount, deadline, stat, method, stat2};
                   
                    DefaultTableModel tbm1 = (DefaultTableModel) salaryTable.getModel();
                    
                    tbm1.addRow(tData);
                    

                }
                connection.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (value.equals("NAME")) {
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection = DriverManager.getConnection(
                        "jdbc:sqlserver://localhost:1433;databaseName=Broadband;selectMethod=cursor", "sa", "123456");

                String dead = dline.getText();
                // String size= jTextField2.getText();

                Statement statement = connection.createStatement();

                //String Client_Name = null;
                //String Email = null;
                //String sql="SELECT cName,cPhoneNo FROM customer WHERE customerId = '"+ Integer.parseInt(dead) +"'";
                // String sql= "SELECT customer.cName, bill.amount,bill.deadline, bill.status,customer.cPhoneNo From bill INNER JOIN customer ON bill.customerId=customer.customerId  WHERE customerId = '"+ Integer.parseInt(dead) +"'";
                //    ResultSet resultSet = statement.executeQuery
                ResultSet resultSet = statement.executeQuery("select e.employeeId,CONCAT(e.eFame, ' ', e.elastName) AS name ,e.ephoneNo, s.amount,s.time,s.position,s.status from employee E,salary S where EXISTS (select E.employeeId from employee join salary on(E.employeeId =S.employeeId) where S.status like '%" + dead + "%' )");
                if (resultSet.next()) {

                    String Bid = resultSet.getString("employeeId");
                    String Cid = resultSet.getString("name");
                    String amount = resultSet.getString("ephoneNo");

                    String deadline = resultSet.getString("amount");
                    String stat = resultSet.getString("time");
                    String method = resultSet.getString("position");

                    String stat2 = resultSet.getString("status");

                    String tData[] = {Bid, Cid, amount, deadline, stat, method, stat2};
                    DefaultTableModel tbm1 = (DefaultTableModel) salaryTable.getModel();
                    tbm1.addRow(tData);

                } else {
                    JOptionPane.showMessageDialog(this, "Enter Keyword");

                }
                connection.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter Keyword");
        }


    }//GEN-LAST:event_jButton4ActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        String tname = "", temail = "", sss, area, taddress = "", customerId = "";
        int tNo;
        DefaultTableModel defaultTableModel = (DefaultTableModel) salaryTable.getModel();

        if (salaryTable.getSelectedRowCount() == 1) {
            //   System.out.println("at update");

        //     id.setText(tid);
       // name.setText(tName);
       // con.setText(temail);
       // amt.setText(tadd);
      //  time.setText(tcontact);
      //  rank.setText(t);

        sss=stat.getText();
            
         //   tname = f.getText();
         //   temail = l.getText();
         //   taddress = time.getText();
         //   tNo = Integer.parseInt(phn.getText());

          //  area = aw.getText();
         //   sss = sch.getText();

            int row = salaryTable.getSelectedRow();
            customerId = defaultTableModel.getValueAt(row, 0).toString();
            // CustomerProfile(customerId).setVisible(true);
            //  CustomerProfile cp= new CustomerProfile(customerId.getText());
            
            String value= jComboBox1.getSelectedItem().toString();
               if(value.equals("Paid")){
                   value= "Paid";
               }
               else  value= "Due";

            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection = DriverManager.getConnection(
                        "jdbc:sqlserver://localhost:1433;databaseName=Broadband;selectMethod=cursor", "sa", "123456");

                String sql = "UPDATE salary SET status='" + sss + "' where employeeId = " + Integer.parseInt(customerId) + ";";

                PreparedStatement prepare = connection.prepareStatement(sql);

                prepare.executeUpdate();

                DefaultTableModel tbm = (DefaultTableModel) salaryTable.getModel();
                tbm.setRowCount(0);
                JOptionPane.showMessageDialog(this, "Successfully Updated.");
                connection.close();
            } catch (SQLException ex) {
                Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void statActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statActionPerformed

    private void salaryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salaryTableMouseClicked
        // TODO add your handling code here:

        DefaultTableModel tbm1 = (DefaultTableModel) salaryTable.getModel();

        String tid = tbm1.getValueAt(salaryTable.getSelectedRow(), 0).toString();

        String tName = tbm1.getValueAt(salaryTable.getSelectedRow(), 1).toString();
        String temail = tbm1.getValueAt(salaryTable.getSelectedRow(), 2).toString();
        String tadd = tbm1.getValueAt(salaryTable.getSelectedRow(), 3).toString();
        String tcontact = tbm1.getValueAt(salaryTable.getSelectedRow(), 4).toString();
        String t = tbm1.getValueAt(salaryTable.getSelectedRow(), 5).toString();
        String wa = tbm1.getValueAt(salaryTable.getSelectedRow(), 6).toString();
        id.setText(tid);
        name.setText(tName);
        con.setText(temail);
        amt.setText(tadd);
        time.setText(tcontact);
        rank.setText(t);

        stat.setText(wa);
    }//GEN-LAST:event_salaryTableMouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
         DefaultTableModel tbm = (DefaultTableModel) salaryTable.getModel();
                tbm.setRowCount(0);
         try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Broadband;selectMethod=cursor", "sa", "123456");

            Statement statement = connection.createStatement();
            String sql = "SELECT employee.employeeId,CONCAT(employee.eFame, ' ', employee.elastName) AS name  , employee.ephoneNo,salary.amount,salary.time,salary.position,salary.status   From employee INNER JOIN salary on employee.employeeId= salary.employeeId";
            //  String sql= "SELECT bill.billId, customer.customerId, customer.cName, bill.amount, bill.status,customer.cPhoneNo From bill INNER JOIN customer ON bill.customerId=customer.customerId ";
            ResultSet resultSet = statement
                    .executeQuery(sql);

            while (resultSet.next()) {

                String id = resultSet.getString("employeeId");
                String fname = resultSet.getString("name");

                String fNo = resultSet.getString("ephoneNo");

                String des = resultSet.getString("amount");
                String sal = resultSet.getString("time");
                String wa = resultSet.getString("position");
                String ja = resultSet.getString("status");
                String tData[] = {id, fname, fNo, des, sal, wa, ja};
                DefaultTableModel tbm1 = (DefaultTableModel) salaryTable.getModel();
                tbm1.addRow(tData);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton7ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amt;
    private javax.swing.JTextField con;
    private javax.swing.JTextField dline;
    private javax.swing.JPanel hide;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField rank;
    private javax.swing.JTable salaryTable;
    private javax.swing.JTextField stat;
    private javax.swing.JTextField time;
    // End of variables declaration//GEN-END:variables
}
